<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AfterAddEmployeeNotFound" xml:space="preserve">
    <value>Employee after add not found!</value>
  </data>
  <data name="AfterAddPositionNotFound" xml:space="preserve">
    <value>After add position not found</value>
  </data>
  <data name="AfterAddRoleNotFound" xml:space="preserve">
    <value>Role after add not found!</value>
  </data>
  <data name="AfterAddUserNotFound" xml:space="preserve">
    <value>User after add not found!</value>
  </data>
  <data name="ContentPathNotFound" xml:space="preserve">
    <value>Folder for content not found.</value>
  </data>
  <data name="CountItemsLeastOne" xml:space="preserve">
    <value>Count items must be at least 1.</value>
  </data>
  <data name="CreatingWithRoleIsProhibited" xml:space="preserve">
    <value>Сreating a user with current role is prohibited!</value>
  </data>
  <data name="DataIsNotValid" xml:space="preserve">
    <value>Data for item is not valid!</value>
  </data>
  <data name="DataNotDeletedFromDB" xml:space="preserve">
    <value>Data has not been deleted from the database!</value>
  </data>
  <data name="DataNotUpdatedInDB" xml:space="preserve">
    <value>Data has not been updated in the database!</value>
  </data>
  <data name="DataNotWrittenToDB" xml:space="preserve">
    <value>Data was not written to the database!</value>
  </data>
  <data name="DateOfIssue" xml:space="preserve">
    <value>Date of issue</value>
  </data>
  <data name="DriverCategoriesNotFound" xml:space="preserve">
    <value>Driver categories (category) not found</value>
  </data>
  <data name="DriverCategoryAlreadyExist" xml:space="preserve">
    <value>Driver category already exist in database!</value>
  </data>
  <data name="DriverCategoryNotFound" xml:space="preserve">
    <value>Driver category not found!</value>
  </data>
  <data name="DriverLicense" xml:space="preserve">
    <value>Driver license</value>
  </data>
  <data name="DriverLicenseAlreadyExist" xml:space="preserve">
    <value>Driver license already exist in database!</value>
  </data>
  <data name="DriverLicenseNotFound" xml:space="preserve">
    <value>Driver license not found!</value>
  </data>
  <data name="DriverLicensePhotoAlreadyExist" xml:space="preserve">
    <value>Driver license photo already exist in database!</value>
  </data>
  <data name="DriverLicensePhotoNotFound" xml:space="preserve">
    <value>Driver license photo not found!</value>
  </data>
  <data name="DriverLicensePhotos" xml:space="preserve">
    <value>Driver license photos</value>
  </data>
  <data name="DriverLicensePhotosNotFound" xml:space="preserve">
    <value>Driver license photos not found!</value>
  </data>
  <data name="DriverLicensesNotFound" xml:space="preserve">
    <value>Driver licenses not found!</value>
  </data>
  <data name="DriverMedicalCertificate" xml:space="preserve">
    <value>Driver medical certificate</value>
  </data>
  <data name="DriverMedicalCertificateAlreadyExist" xml:space="preserve">
    <value>Driver medical certificate exist in database!</value>
  </data>
  <data name="DriverMedicalCertificateNotFound" xml:space="preserve">
    <value>Driver medical certificate not found!</value>
  </data>
  <data name="DriverMedicalCertificatePhotoAlreadyExist" xml:space="preserve">
    <value>Driver medical certificate photo already exist in database!</value>
  </data>
  <data name="DriverMedicalCertificatePhotoNotFound" xml:space="preserve">
    <value>Driver medical certificate photo not found!</value>
  </data>
  <data name="DriverMedicalCertificatePhotos" xml:space="preserve">
    <value>Driver medical certificate photos</value>
  </data>
  <data name="DriverMedicalCertificatePhotosNotFound" xml:space="preserve">
    <value>Driver medical certificates photo not found!</value>
  </data>
  <data name="DriverMedicalCertificatesNotFound" xml:space="preserve">
    <value>Driver medical certificates not found!</value>
  </data>
  <data name="EmployeeAlreadyExist" xml:space="preserve">
    <value>Employee already exist in database!</value>
  </data>
  <data name="EmployeeFoundAfterDelete" xml:space="preserve">
    <value>Failed to delete employee from database</value>
  </data>
  <data name="EmployeeNotFound" xml:space="preserve">
    <value>Employee not found!</value>
  </data>
  <data name="EmployeesNotFound" xml:space="preserve">
    <value>Employees not found!</value>
  </data>
  <data name="EnterDateOfIssue" xml:space="preserve">
    <value>Enter date of issue</value>
  </data>
  <data name="EnterDriverLicensePhotos" xml:space="preserve">
    <value>Load driver license photos</value>
  </data>
  <data name="EnterDriverMedicalCertificatePhotos" xml:space="preserve">
    <value>Load driver medical certificate photos</value>
  </data>
  <data name="EnterExpiryDate" xml:space="preserve">
    <value>Enter expiry date</value>
  </data>
  <data name="EnterFirstName" xml:space="preserve">
    <value>Enter firstname</value>
  </data>
  <data name="EnterPatronymic" xml:space="preserve">
    <value>Enter patronymic</value>
  </data>
  <data name="EnterPosition" xml:space="preserve">
    <value>Enter position</value>
  </data>
  <data name="EnterSerialNumber" xml:space="preserve">
    <value>Enter serial number</value>
  </data>
  <data name="EnterSurname" xml:space="preserve">
    <value>Enter surname</value>
  </data>
  <data name="ExpiryDate" xml:space="preserve">
    <value>Expiry date</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>FirstName</value>
  </data>
  <data name="InvalidLoginAndOrPassword" xml:space="preserve">
    <value>User not found! Invalid login and / or password intered.</value>
  </data>
  <data name="InvalidRoleName" xml:space="preserve">
    <value>Role not found! Invalid role name intered.</value>
  </data>
  <data name="LoginAlreadyExists" xml:space="preserve">
    <value>User with current login already exists!</value>
  </data>
  <data name="NoData" xml:space="preserve">
    <value>No data for item!</value>
  </data>
  <data name="NoPhoto" xml:space="preserve">
    <value>No photo</value>
  </data>
  <data name="OpenCategories" xml:space="preserve">
    <value>Open driver categories</value>
  </data>
  <data name="Patronymic" xml:space="preserve">
    <value>Patronymic</value>
  </data>
  <data name="PhotoFileAlreadyExist" xml:space="preserve">
    <value>Photo file already exist.</value>
  </data>
  <data name="PhotoFileWithIdNotFound" xml:space="preserve">
    <value>Photo file not found in folder. Name of photo file: </value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="PositionAlreadyExist" xml:space="preserve">
    <value>Position already exist in database!</value>
  </data>
  <data name="PositionFoundAfterDelete" xml:space="preserve">
    <value>Failed to delete position from database</value>
  </data>
  <data name="PositionNotFound" xml:space="preserve">
    <value>Position not found!</value>
  </data>
  <data name="PositionsNotFound" xml:space="preserve">
    <value>Positions not found!</value>
  </data>
  <data name="RecordToEditWasModifiedAnotherUser" xml:space="preserve">
    <value>The record you attempted to edit was modified by another user after you got the original value. The edit operation was canceled and the current values in the database have been displayed. If you still want to edit this record, try begin again.</value>
  </data>
  <data name="RoleAlreadyExists" xml:space="preserve">
    <value>Role with current name already exists!</value>
  </data>
  <data name="RoleNotFound" xml:space="preserve">
    <value>Role with current name not found! Perhaps such a role does not exist.</value>
  </data>
  <data name="SerialNumber" xml:space="preserve">
    <value>Serial number</value>
  </data>
  <data name="StartItemNotExist" xml:space="preserve">
    <value>Current start item does not exist.</value>
  </data>
  <data name="Surname" xml:space="preserve">
    <value>Surname</value>
  </data>
  <data name="ValidateFirstName" xml:space="preserve">
    <value>The firstname must begin with a capital letter and be no more than 30 characters.</value>
  </data>
  <data name="ValidatePatronymic" xml:space="preserve">
    <value>The patronymic must begin with a capital letter and be no more than 30 characters.</value>
  </data>
  <data name="ValidatePosition" xml:space="preserve">
    <value>The position must begin with a capital letter and be no more than 30 characters.</value>
  </data>
  <data name="ValidateSurname" xml:space="preserve">
    <value>The surname must begin with a capital letter and be no more than 30 characters.</value>
  </data>
</root>